plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
}

//sourceCompatibility = JavaVersion.VERSION_1_8
//targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
	maven {
        name = "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
    }
	maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }
	maven {
		name = "ojmuss"
		url = "https://maven.modmuss50.me"
	}
	maven {
		url "https://maven.shedaniel.me/"
	}
	maven {
		name = "No"
		url 'https://jitpack.io'
	}
		maven {
		name = "Bad Menu"
		url = "https://maven.terraformersmc.com/releases"
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	// modImplementation "com.github.CoolMineman:LibGui:master-SNAPSHOT"
	// include "com.github.CoolMineman:LibGui:master-SNAPSHOT"
	modImplementation "io.github.cottonmc:LibGui:${project.libgui_version}"
	include "io.github.cottonmc:LibGui:${project.libgui_version}" 
	modImplementation "alexiil.mc.lib:libblockattributes-all:0.10.2"
	include "alexiil.mc.lib:libblockattributes-all:0.10.2"

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
	include "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}"

	modImplementation "com.terraformersmc:modmenu:${project.badmenu_version}"

	implementation "org.objenesis:objenesis:3.2"
	include "org.objenesis:objenesis:3.2"

	//Outdated dependencies break everything ahhhhhhhhh

	// modCompileOnly "com.terraformersmc:terrestria:2.2.0"
	// modCompileOnly("com.terraformersmc:cinderscapes:1.3.3") {
	// 	transitive = false
	// }
	// modCompileOnly "com.terraformersmc:traverse:3.3.2"
	// modCompileOnly("TechReborn:TechReborn-1.16:3.8.3+build.231") {
	// 	transitive = false
	// }
	// modImplementation "io.github.CorgiTaco:BYG:f27ab3c0f0c235cbf0286da932cc5b1d4e4d59dd" //Broken rn b/c modmuss removed one of its dependencies from their maven

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}


tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release = 17
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
